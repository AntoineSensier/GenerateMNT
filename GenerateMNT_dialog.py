# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GenerateMNTDialog
                                 A QGIS plugin
 Generate a MNT raster from RGE Alti mesh and an extent zone
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-03-30
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Antone SENSIER, INRAE
        email                : antoine.sensier@inrae.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from . import GenerateMNT_provider
from .qgis_lib_mc import utils, qgsUtils, log, qgsTreatments, feedbacks
from qgis.core import QgsApplication, QgsProcessingContext, QgsProject, QgsProcessing
from qgis.gui import QgsMapCanvas


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'GenerateMNT_dialog_base.ui'))


class GenerateMNTDialog(QtWidgets.QDialog, FORM_CLASS):
    pluginName = 'GenerateMNT'
    def __init__(self, parent=None):
        """Constructor."""
        super(GenerateMNTDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        
        
        # TO DO : fonction pour init les champs ?
        self.outFile.setFilter("*.tif")
        
        self.debugButton.clicked.connect(self.onRunClicked)
        
        self.pushCancel.clicked.connect(self.onCancelClicked)
    
    def initTabs(self):
        #global progressFeedback, paramsModel
        logConnector = log.LogConnector(self)
        logConnector.initGui()
        self.feedback =  feedbacks.ProgressFeedback(self)
        self.feedback.connectComponents()
        
        self.context = QgsProcessingContext()
        utils.print_func = self.txtLog.append
        self.progressBar.setValue(0)
        self.txtLog.clear()
        self.tabWidget.setCurrentWidget(self.tabMain)

    
    def onRunClicked(self):
        print("RUN")
        
        self.context.setFeedback(self.feedback)

        # in_extent_zone = "D:\Donnees\Zone_est\emprise_est_Montpelleir_reproj.shp"
        # in_grid = "D:\Donnees\RGEALTI_2-0_1M_ASC_LAMB93-IGN69_D034_2022-12-16\RGEALTI\dalles.shp"
        # in_folder = "D:\Donnees\RGEALTI_2-0_1M_ASC_LAMB93-IGN69_D034_2022-12-16\RGEALTI\RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D034_20230113"
        
        in_extent_zone = self.extentLayer.filePath()
        in_grid = self.gridLayer.filePath()
        in_folder = self.folderMNT.filePath()

        # test valeur input
        # if not in_extent_zone:
            # self.feedback.print_func("Paramètre manquant : zone d'étude")
        # if not in_grid:
            # utils.user_error("Paramètre manquant : dalles des MNT")
        # if not in_folder:
            # utils.user_error("Paramètre manquant : Dossier de fichiers MNT")
        out_path = QgsProcessing.TEMPORARY_OUTPUT
        if self.outFile.filePath():
            out_path = self.outFile.filePath()
        self.testRemoveLayer(out_path)
        
        self.tabWidget.setCurrentWidget(self.tabLog)
        
        parameters = { GenerateMNT_provider.GenerateMNTAlgorithm.EXTENT_ZONE : in_extent_zone,
                       GenerateMNT_provider.GenerateMNTAlgorithm.GRID_INPUT : in_grid,
                       GenerateMNT_provider.GenerateMNTAlgorithm.FOLDER_MNT_FILES : in_folder,
                       GenerateMNT_provider.GenerateMNTAlgorithm.OUTPUT_RASTER_MNT: out_path}
        res = qgsTreatments.applyProcessingAlg("GenerateMNT","GenerateMNTfromRGEALTI",parameters,onlyOutput=False,context=self.context,feedback=self.feedback)
        
        
        rasterLayer = qgsUtils.loadRasterLayer(res['RasterMNT'])
        QgsProject.instance().addMapLayer(rasterLayer)
        
            
    
    def onCancelClicked(self):
        self.close()
        
        
    def testRemoveLayer(self, layer_path):
        # List existing layers ids
        existing_layers_ids = [layer.id() for layer in QgsProject.instance().mapLayers().values()]
        # List existing layers paths
        existing_layers_paths = [layer.dataProvider().dataSourceUri().split('|')[0] for layer in QgsProject.instance().mapLayers().values()]

        if layer_path in existing_layers_paths:
            id_to_remove = existing_layers_ids[existing_layers_paths.index(layer_path)]
            QgsProject.instance().removeMapLayer(id_to_remove)